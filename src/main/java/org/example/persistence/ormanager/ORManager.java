package org.example.persistence.ormanager;

import org.example.persistence.annotations.*;

import javax.sql.DataSource;
import java.nio.file.Path;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Map;
import java.util.Properties;
import java.util.UUID;

import static org.example.persistence.utilities.Utils.readProperties;

public interface ORManager {
    // let it work with ids:
    // - Long (autogenerated at DB side)  (HIGH)
    @Id
    UUID uuid = UUID.randomUUID();
    // - String                           (OPTIONAL)
    // The fields may be of types:
    // - int/Integer                      (HIGH)
    // - long/Long                        (HIGH)
    // - double/Double                    (OPTIONAL)
    // - boolean/Boolean                  (OPTIONAL)
    // - String                           (HIGH)
    LocalDate localDate = null;
    LocalTime localTime = null;
    // - LocalDateTime/Instant            (MEDIUM)
    // - BigDecimal                       (OPTIONAL)
    // - Enum +                           (OPTIONAL)
    //   @Enumerated(EnumType.ORDINAL/EnumType.STRING)
    static ORManager withPropertiesFrom(String filename) throws SQLException {
        Path path = Path.of(filename);

        Properties properties = readProperties(path);


        String jdbcUrl = properties.getProperty("jdbc-url");
        String jdbcUser = properties.getProperty("jdbc-user");
        String jdbcPass= properties.getProperty("jdbc-pass");

        return new ORManagerImpl(ORManagerImpl.createDataSource(jdbcUrl,jdbcUser,jdbcPass, Map.of()));

    }

    // initialize connection factory for the DB based on the DataSource
    static ORManager withDataSource(DataSource dataSource) {
        return new ORManagerImpl(dataSource);
    }
}
