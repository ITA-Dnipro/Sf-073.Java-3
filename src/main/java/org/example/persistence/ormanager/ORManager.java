package org.example.persistence.ormanager;

import javax.sql.DataSource;
import java.io.Serializable;
import java.nio.file.Path;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Properties;

import static org.example.persistence.utilities.Utils.readProperties;

public interface ORManager {
    // initialize connection factory for the DB
    // read the jdbc url, username and password from
    //  the given property file
    static ORManager withPropertiesFrom(String filename) throws SQLException {
        Path path = Path.of(filename);

        Properties properties = readProperties(path);


        String jdbcUrl = properties.getProperty("jdbc-url");
        String jdbcUser = properties.getProperty("jdbc-user");
        String jdbcPass = properties.getProperty("jdbc-pass");

        return new ORManagerImpl(ORManagerImpl.createDataSource(jdbcUrl, jdbcUser, jdbcPass, Map.of()));

    }

    // initialize connection factory for the DB based on the DataSource
    static ORManager withDataSource(DataSource dataSource) {
        return new ORManagerImpl(dataSource);
    }

    // generate the schema in the DB
    // for given list of entity classes (and all related by OneToMany/ManyToOne) create a schema in DB
    void register(Class... entityClasses);

    // save a new object to DB, set id if autogenerated or merge into DB if id is present
    <T> T save(T o);

    <T> Optional<T> findById(Serializable id, Class<T> cls);

    <T> List<T> findAll(Class<T> cls);

    // send o -> DB row (to table)
    <T> T update(T o);

    // send o <- DB row (from table)
    <T> T refresh(T o);

    // set autogenerated id to null
    // return true if successfully deleted
    boolean delete(Object o);
}
